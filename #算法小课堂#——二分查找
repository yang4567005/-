    在理论与实践中，查找一直是一个十分基础但是重要的课题。计算机中查找算法层出不穷。比较基础的有顺序查找、二分查找、二叉排序树查找、哈希表法、分块查找等。
今天我们来简要探讨一下二分查找的原理与具体实现。

一、二分查找的基本原理

    二分查找也称折半查找（Binary Search），是一种效率较高的查找方法。折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。



    首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，
如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。

    可以看出，二分查找算法实质上是一个简单的循环算法。

    那么如果用c++语言来实现，具体代码该是什么样子呢？

二、c++语言代码实现

    1.用到的库函数

#include <iostream>

    2.设定的变量

int n; //顺序存储的有序线性表中元素个数

int m;//一共要查找的元素的个数（每次查找一个）

int k;//你要查找的元素的具体数值

int a[10000];//用于存储线性表的数组。

    3.用到的函数

    3.1主函数main（）

int main()

{

    cin>>n;                        //输入线性表元素个数

    for(int i=0; i<n; i++)

    {

        cin>>a[i];                //将线性表各个元素存入数组

    }

    cin>>m;                    //输入要查询的次数

    for(int i=0; i<m; i++)//循环m次即查询m次

    {

        cin>>k;                 //输入查询哪个值

        if(binarysearch(a,n,k))

        {

            cout<<"Yes"<<endl;//返回值为ture，输出yes表示查到了。

        }

        else

        {

            cout<<"No"<<endl;

        }

    }

    return 0;

}

    3.2二分查找函数bool binarysearch(int a[],int n,int k);

bool binarysearch(int a[],int n,int k)

{

    int st=0,ed=n-1;            //st为初始化为数组第一个元素。在该线性表可理解为中为查找范围的头指针

                                          //同理，ed为尾指针

    int mid;                         //头尾指针中间值，用于与查找对象进行比较

    while(st<=ed)               //查找未结束

    {

        mid=(st+ed)/2;        

        if(a[mid]<k)

        {

            st=mid+1;            //中间值比要找的数小，则若该数存在，则位于中间值右方。故将头指针改为mid+1

        }

        else if(a[mid]>k)

        {

            ed=mid-1;            //同理

        }

        else

        {

            return true;

        }

    }

    return false;

}

三、分析总结

    二分查找在binarysearch（）函数中的while(st<=ed) 处完成了循环，而且每次做比较时都是与中间值进行对比。由此不难推算出比较的次数至多为log2 n次，
相较于顺序查找（时间复杂度为O(n)）来说算是一个效率较高的查找算法了。

    但是它的缺点也很明显，二分查找对要查找的表要求比较苛刻，既要是顺序表，又要元素排列有序，顺序表由于插入删除元素比较困难，很多时候人们喜欢用链
表来存储数据。二分查找固然有他的局限性，但是其中利用循环进行折半来缩短查找时间和次数的思想还是很值得大家学习的。


